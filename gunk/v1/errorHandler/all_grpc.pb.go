// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package errorHandler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ErrorHandlerServiceClient is the client API for ErrorHandlerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ErrorHandlerServiceClient interface {
	CreateErrorHandler(ctx context.Context, in *CreateErrorHandlerRequest, opts ...grpc.CallOption) (*CreateErrorHandlerResponse, error)
	GetErrorHandler(ctx context.Context, in *GetErrorHandlerRequest, opts ...grpc.CallOption) (*GetErrorHandlerResponse, error)
	ListErrorHandler(ctx context.Context, in *ListErrorHandlerRequest, opts ...grpc.CallOption) (*ListErrorHandlerResponse, error)
	DeleteErrorHandler(ctx context.Context, in *DeleteErrorHandlerRequest, opts ...grpc.CallOption) (*DeleteErrorHandlerResponse, error)
}

type errorHandlerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewErrorHandlerServiceClient(cc grpc.ClientConnInterface) ErrorHandlerServiceClient {
	return &errorHandlerServiceClient{cc}
}

func (c *errorHandlerServiceClient) CreateErrorHandler(ctx context.Context, in *CreateErrorHandlerRequest, opts ...grpc.CallOption) (*CreateErrorHandlerResponse, error) {
	out := new(CreateErrorHandlerResponse)
	err := c.cc.Invoke(ctx, "/errorHandler.ErrorHandlerService/CreateErrorHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorHandlerServiceClient) GetErrorHandler(ctx context.Context, in *GetErrorHandlerRequest, opts ...grpc.CallOption) (*GetErrorHandlerResponse, error) {
	out := new(GetErrorHandlerResponse)
	err := c.cc.Invoke(ctx, "/errorHandler.ErrorHandlerService/GetErrorHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorHandlerServiceClient) ListErrorHandler(ctx context.Context, in *ListErrorHandlerRequest, opts ...grpc.CallOption) (*ListErrorHandlerResponse, error) {
	out := new(ListErrorHandlerResponse)
	err := c.cc.Invoke(ctx, "/errorHandler.ErrorHandlerService/ListErrorHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *errorHandlerServiceClient) DeleteErrorHandler(ctx context.Context, in *DeleteErrorHandlerRequest, opts ...grpc.CallOption) (*DeleteErrorHandlerResponse, error) {
	out := new(DeleteErrorHandlerResponse)
	err := c.cc.Invoke(ctx, "/errorHandler.ErrorHandlerService/DeleteErrorHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ErrorHandlerServiceServer is the server API for ErrorHandlerService service.
// All implementations must embed UnimplementedErrorHandlerServiceServer
// for forward compatibility
type ErrorHandlerServiceServer interface {
	CreateErrorHandler(context.Context, *CreateErrorHandlerRequest) (*CreateErrorHandlerResponse, error)
	GetErrorHandler(context.Context, *GetErrorHandlerRequest) (*GetErrorHandlerResponse, error)
	ListErrorHandler(context.Context, *ListErrorHandlerRequest) (*ListErrorHandlerResponse, error)
	DeleteErrorHandler(context.Context, *DeleteErrorHandlerRequest) (*DeleteErrorHandlerResponse, error)
	mustEmbedUnimplementedErrorHandlerServiceServer()
}

// UnimplementedErrorHandlerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedErrorHandlerServiceServer struct {
}

func (UnimplementedErrorHandlerServiceServer) CreateErrorHandler(context.Context, *CreateErrorHandlerRequest) (*CreateErrorHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateErrorHandler not implemented")
}
func (UnimplementedErrorHandlerServiceServer) GetErrorHandler(context.Context, *GetErrorHandlerRequest) (*GetErrorHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetErrorHandler not implemented")
}
func (UnimplementedErrorHandlerServiceServer) ListErrorHandler(context.Context, *ListErrorHandlerRequest) (*ListErrorHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListErrorHandler not implemented")
}
func (UnimplementedErrorHandlerServiceServer) DeleteErrorHandler(context.Context, *DeleteErrorHandlerRequest) (*DeleteErrorHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteErrorHandler not implemented")
}
func (UnimplementedErrorHandlerServiceServer) mustEmbedUnimplementedErrorHandlerServiceServer() {}

// UnsafeErrorHandlerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ErrorHandlerServiceServer will
// result in compilation errors.
type UnsafeErrorHandlerServiceServer interface {
	mustEmbedUnimplementedErrorHandlerServiceServer()
}

func RegisterErrorHandlerServiceServer(s grpc.ServiceRegistrar, srv ErrorHandlerServiceServer) {
	s.RegisterService(&ErrorHandlerService_ServiceDesc, srv)
}

func _ErrorHandlerService_CreateErrorHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateErrorHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorHandlerServiceServer).CreateErrorHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errorHandler.ErrorHandlerService/CreateErrorHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorHandlerServiceServer).CreateErrorHandler(ctx, req.(*CreateErrorHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorHandlerService_GetErrorHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrorHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorHandlerServiceServer).GetErrorHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errorHandler.ErrorHandlerService/GetErrorHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorHandlerServiceServer).GetErrorHandler(ctx, req.(*GetErrorHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorHandlerService_ListErrorHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListErrorHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorHandlerServiceServer).ListErrorHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errorHandler.ErrorHandlerService/ListErrorHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorHandlerServiceServer).ListErrorHandler(ctx, req.(*ListErrorHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ErrorHandlerService_DeleteErrorHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteErrorHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ErrorHandlerServiceServer).DeleteErrorHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/errorHandler.ErrorHandlerService/DeleteErrorHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ErrorHandlerServiceServer).DeleteErrorHandler(ctx, req.(*DeleteErrorHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ErrorHandlerService_ServiceDesc is the grpc.ServiceDesc for ErrorHandlerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ErrorHandlerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "errorHandler.ErrorHandlerService",
	HandlerType: (*ErrorHandlerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateErrorHandler",
			Handler:    _ErrorHandlerService_CreateErrorHandler_Handler,
		},
		{
			MethodName: "GetErrorHandler",
			Handler:    _ErrorHandlerService_GetErrorHandler_Handler,
		},
		{
			MethodName: "ListErrorHandler",
			Handler:    _ErrorHandlerService_ListErrorHandler_Handler,
		},
		{
			MethodName: "DeleteErrorHandler",
			Handler:    _ErrorHandlerService_DeleteErrorHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "errorHandler/gunk/v1/errorHandler/all.proto",
}
